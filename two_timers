#include "stm8s.h"
#define LED GPIO_PIN_5 
#define LED2 GPIO_PIN_4 

#define TIM4_PERIOD 124
#define TIM2_PERIOD 124
#define TIM4_US_PERIOD 4


volatile uint16_t count_tim2;
volatile uint16_t count_tim4;


@far @interrupt void IRQ_Handler_TIM4(void)
{
    if (count_tim4)
        count_tim4--;

    TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
		//GPIO_WriteReverse(GPIOC, LED2);
		
		
}

@far @interrupt void IRQ_Handler_TIM2(void)
{
    if (count_tim2)
        count_tim2--;

    TIM2_ClearITPendingBit(TIM2_IT_UPDATE);
		
}

void delay_ms(uint16_t ms_tim4)
{
        TIM4_Cmd(DISABLE);       // stop
        TIM4_TimeBaseInit(TIM4_PRESCALER_128, TIM4_PERIOD);
        TIM4_ClearFlag(TIM4_FLAG_UPDATE);
        TIM4_ITConfig(TIM4_IT_UPDATE, ENABLE);

        count_tim4 = ms_tim4;

        TIM4_Cmd(ENABLE);       // let's go

        while(count_tim4);
				GPIO_WriteReverse(GPIOC, LED2);
}
/*void delay(uint16_t ms_tim2)
{
        TIM2_Cmd(DISABLE);       // stop
        TIM2_TimeBaseInit(TIM2_PRESCALER_128, TIM2_PERIOD);
        TIM2_ClearFlag(TIM2_FLAG_UPDATE);
        TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);

        count_tim2 = ms_tim2;

        TIM2_Cmd(ENABLE);       // let's go

        while(count_tim2);
				GPIO_WriteReverse(GPIOB, LED);
}*/
void delay_us(uint16_t us)
{
				TIM4_Cmd(DISABLE);       // stop
        TIM4_TimeBaseInit(TIM4_PRESCALER_4, TIM4_US_PERIOD);
        TIM4_ClearFlag(TIM4_FLAG_UPDATE);
        TIM4_ITConfig(TIM4_IT_UPDATE, ENABLE);

        count_tim4 = us>>1;

        TIM4_Cmd(ENABLE);       // let's go

        while(count_tim4);
	      GPIO_WriteReverse(GPIOB, LED);
	
}
void delay_us_check(uint16_t time)
{
    while (time)
    {
        delay_us(1000);
        time--;
    }
		GPIO_WriteReverse(GPIOB, LED);
}

ErrorStatus status = FALSE;

main()
{
GPIO_DeInit(GPIOB);
GPIO_DeInit(GPIOC);
GPIO_Init(GPIOB, LED, GPIO_MODE_OUT_PP_LOW_FAST);
GPIO_Init(GPIOC, LED2, GPIO_MODE_OUT_PP_LOW_FAST);
CLK_DeInit();
TIM4_DeInit();
//TIM2_DeInit();
enableInterrupts();
	
	
	while(1)
	{
    
		delay_us(100);
    delay_ms(400);
	}
}





#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif
